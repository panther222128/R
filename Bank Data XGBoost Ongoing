install.packages("dplyr")
install.packages("car")
install.packages("randomForest")
install.packages("caret")
install.packages("e1071")
install.packages("writexl")
install.packages("xgboost"))
install.packages("data.table")
install.packages("Matrix")

library(dplyr)
library(car)
library(randomForest)
library(caret)
library(e1071)
library(writexl)
library(xgboost)
library(data.table)
library(Matrix)

churn <- data.frame(read.csv(file = "C:/R Analysis/Churn_Modelling.csv", header = TRUE))

head(churn)

str(churn)

sum(is.na(churn$CreditScore))
sum(is.na(churn$Geography))
sum(is.na(churn$Gender))
sum(is.na(churn$Tenure))
sum(is.na(churn$Balance))
sum(is.na(churn$NumOfProducts))
sum(is.na(churn$HasCrCard))
sum(is.na(churn$IsActiveMember))
sum(is.na(churn$EstimatedSalary))
sum(is.na(churn$Exited))

churn <- churn[!is.na(churn$CreditScore),]
churn <- churn[!is.na(churn$Tenure),]
churn <- churn[!is.na(churn$Balance),]
churn <- churn[!is.na(churn$NumOfProducts),]
churn <- churn[!is.na(churn$HasCrCard),]
churn <- churn[!is.na(churn$IsActiveMember),]
churn <- churn[!is.na(churn$EstimatedSalary),]
churn <- churn[!is.na(churn$Exited),]

sum(is.na(churn$CreditScore))
sum(is.na(churn$Geography))
sum(is.na(churn$Gender))
sum(is.na(churn$Tenure))
sum(is.na(churn$Balance))
sum(is.na(churn$NumOfProducts))
sum(is.na(churn$HasCrCard))
sum(is.na(churn$IsActiveMember))
sum(is.na(churn$EstimatedSalary))
sum(is.na(churn$Exited))

distinct(churn, Geography)
distinct(churn, Gender)

is.factor(churn$Geography)

churn$Geography <- recode(churn$Geography, "'France' = 1")
churn$Geography <- recode(churn$Geography, "'Spain' = 2")
churn$Geography <- recode(churn$Geography, "'Germany' = 3")

is.factor(churn$Geography)

distinct(churn, Geography)

churn$Gender <- recode(churn$Geography, "'Male' = 2")
churn$Gender <- recode(churn$Geography, "'Female' = 1")

is.factor(churn$Gender)

distinct(churn, Gender)

head(churn, n=10)
tail(churn, n=10)

is.factor(churn$HasCrCard)
is.factor(churn$IsActiveMember)
is.factor(churn$Exited)

churn$Geography <- as.numeric(churn$Geography)
churn$Gender <- as.numeric(churn$Gender)
churn$HasCrCard <- as.numeric(churn$HasCrCard)
churn$IsActiveMember <- as.numeric(churn$IsActiveMember)
churn$Exited <- as.numeric(churn$Exited)

is.factor(churn$Geography)
is.factor(churn$Gender)
is.factor(churn$HasCrCard)
is.factor(churn$IsActiveMember)
is.factor(churn$Exited)

str(churn)

is.character(churn$RowNumber)
is.character(churn$CustomerId)
is.character(churn$Surname)
is.character(churn$CreditScore)
is.character(churn$Geography)
is.character(churn$Gender)
is.character(churn$Age)
is.character(churn$Tenure)
is.character(churn$Balance)
is.character(churn$NumOfProducts)
is.character(churn$HasCrCard)
is.character(churn$IsActiveMember)
is.character(churn$EstimatedSalary)
is.character(churn$Exited)

str(churn)

x = churn %>% select(-Exited) %>% data.matrix

y = churn$Exited

xgbmodel = xgb.cv(data = x, label = as.numeric(y), num_class = 2, nfold = 5, nrounds = 200, early_stopping_rounds = 150, objective = 'multi:softprob', eval_metric = 'mlogloss', verbose = F, prediction = T)

attributes(xgbmodel)

xgbmodel$evaluation_log

head(xgbmodel$pred)

pred_df = xgbmodel$pred %>% as.data.frame

pred_df

pred_df %>% select(V1, V2) %>% table

pred_df



pred_df


trainset <- as.matrix(churn[churnsample,])
testset <- as.matrix(churn[-churnsample,])

trainset <- as(trainset, "dgCMatrix")
testset <- as(testset, "dgCMatrix")

names(trainset)

xgb.DMatrix(trainset)

bst <- xgboost(data = trainset, label = trainset$Exited, max.depth = 2, eta = 1, nrounds = 2, nthread = 2, objective = "binary:logistic")

pred <- predict(bst, testset)

pred












# Example
# load data
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
train <- agaricus.train
test <- agaricus.test

train
test

train$data

# fit model
bst <- xgboost(data = train$data, label = train$label, max.depth = 2, eta = 1, nrounds = 2,
               nthread = 2, objective = "binary:logistic")
# predict
pred <- predict(bst, test$data)

pred
